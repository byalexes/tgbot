task build () {
    doLast {
        copyGitHooks()
        createPHPCSFile()
        createPHPStanFile()
        buildContainers()
        buildApp('app', 'build')
        runContainers()
    }
}

task test () {
    doLast {
        buildContainers()
        buildApp('app', 'test')
    }
}

def buildContainers() {
    createEnvFile()
    exec {
        commandLine 'docker-compose', 'stop'
    }
    exec {
        commandLine 'docker-compose', 'up', '--build', '--no-start'
    }
}

def runContainers() {
    exec {
        commandLine 'docker-compose', 'up', '-d'
    }
}

def buildApp(app, mode) {
    exec {
        commandLine 'docker-compose', 'up', '-d', app
    }
    containerExec(app, ['./build', mode])
    exec {
        commandLine 'docker-compose', 'stop', app
    }
}

def containerExec(container, command) {
    def cmd = ['docker-compose', 'exec', '-T', container]
    cmd.addAll(command)
    exec {
        commandLine cmd
    }
}

def containerRun(container, command) {
    def cmd = ['docker-compose', 'run', '-T', '--entrypoint']
    cmd.addAll(command)
    cmd.add(container)
    exec {
        commandLine cmd
    }
}

def createEnvFile() {
    if(!file('.env').exists()) {
        copy {
            from '.env.dist'
            into '.'
            rename { String fileName ->
                fileName.replace(".env.dist", ".env")
            }
        }
    }
}

def createPHPCSFile() {
    if(!file('./app/.php_cs').exists()) {
        copy {
            from './app/.php_cs.dist'
            into './app/'
            rename { String fileName ->
                fileName.replace(".php_cs.dist", ".php_cs")
            }
        }
    }
}

def createPHPStanFile() {
    if(!file('./app/phpstan,neon').exists()) {
        copy {
            from './app/phpstan.neon.dist'
            into './app/'
            rename { String fileName ->
                fileName.replace("phpstan.neon.dist", "phpstan.neon")
            }
        }
    }
}

def copyHook(hook) {
    copy {
        from "git_hooks/${hook}"
        into ".git/hooks"
    }
}

def copyGitHooks() {
    copyHook('pre-commit')
    copyHook('post-commit')
}
